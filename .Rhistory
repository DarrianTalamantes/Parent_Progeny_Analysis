standardDevs[1]/100
ScoreDistances <- Scores
i = 1
j = 1
for (i in 1:ncol(ScoreDistances)){
parentMean <- Means[i]
parentSTD <- standardDevs[i]
for (j in 1:nrow(ScoreDistances)){
ScoreDistances[j,i] <- (Scores[j,i] - parentMean)/parentSTD
}
}
ScoreDistances2 <- tibble::rownames_to_column(ScoreDistances, "Progeny")
ScoreDistances3 <- melt(ScoreDistances2, id = c("Progeny"))
# Finding parents with highest two psoitive stds away from the mean. Checks if others are close and if so adds two more
predicted_Parents <- as.data.frame(matrix(ncol = ncol(Scores), nrow = nrow(Scores)))
rownames(predicted_Parents) <- Scores2[,1]
predicted_Parents <- tibble::rownames_to_column(predicted_Parents, "Progeny")
for (i in 1:nrow(predicted_Parents)){
Progeny_name <- predicted_Parents[i,1]
single_Progeny <- subset(ScoreDistances3, Progeny == Progeny_name)
single_Progeny_ordered <- single_Progeny[order(single_Progeny$value),c(1,2,3)] #Orders data set by chosen column
predicted_Parents[i,2] <- single_Progeny_ordered[ncol(ScoreDistances),2] # For some reason this translates the names into numbers representing the names in alphabetical order
predicted_Parents[i,3] <- single_Progeny_ordered[ncol(ScoreDistances)-1,2]
if ((single_Progeny_ordered[ncol(ScoreDistances)-2,3] - single_Progeny_ordered[ncol(ScoreDistances)-3,3]) < .5){
predicted_Parents[i,4] <- single_Progeny_ordered[ncol(ScoreDistances)-2,2]
predicted_Parents[i,5] <- single_Progeny_ordered[ncol(ScoreDistances)-3,2]
}
}
# Making a refrence key to know what progeny go with what parents
new_row_names <- parent_progeny_key[, "V1"]
rownames(parent_progeny_key) <- new_row_names
parent_progeny_key <- subset(parent_progeny_key, select = -c(V1))
# Adding key  to data that may need it
Scores2 <- merge(Scores2,parent_progeny_key, by.x = "Progeny", by.y = 0)
#Histograms of 1 parent vs all progeny
MakeHis <- function(parent_name){
plot1 <- ggplot(Scores2, aes_(x=as.name(parent_name))) + geom_histogram(binwidth=.01) + theme_bw() +
xlim(.6, 1) + ylim(0, 1800)
return(plot1)
}
i=0
x = 301
for (i in 2:18){
Parent = colnames(Scores2[i])
KnownParent = subset(Scores2, V2 == x)
cols <- c(i, 19)
KnownParent <- KnownParent[,cols]
print(ggplot(Scores2, aes_(x=as.name(Parent))) + geom_histogram(binwidth=.01)  + geom_histogram(data = KnownParent, fill = "darkblue", binwidth=.01)+ theme_bw() +
xlim(.6, 1) + ylim(-1, 1800))
if (x == 308 | x == 310 | x == 316){
x = x+2}
}
View(KnownParent)
View(Scores2)
View(max_scores)
Flex_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/progeny_hmp_names.txt", sep = "\t")
Parent_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_hmp_names_clean.txt", sep = "\t")
Scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table_normalized.txt", sep = " ")
Scores_not_normal <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table.txt", sep = " ")
max_scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/max_scores.txt", sep = " ")
Parents_Percent_Heterozygous <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/Parents_Percent_Heterozygous.txt", sep = "\t", header = TRUE)
parent_progeny_key <- read.table ("/home/drt83172/Documents/Tall_fescue/parent_projeny.txt", sep = "\t", header = FALSE)
#Fixing up the name data to just have the names and not other stuff
Flex_hmp_names2 <- select(Flex_hmp_names, -1:-11)
Parent_hmp_names2 <- select(Parent_hmp_names, -1:-11)
Parent_hmp_names2 <- gather(Parent_hmp_names2, key)
Flex_hmp_names2 <- gather(Flex_hmp_names2, key)
typeof(Parent_hmp_names2)
# The Colnames functino renames columns with 1 for every column. Did this with 2 sets of data.
new_col_names <- Parent_hmp_names2[, "value"]
colnames(Scores) <- new_col_names
new_row_names <- Flex_hmp_names2[, "value"]
rownames(Scores) <- new_row_names
Scores2 <- tibble::rownames_to_column(Scores, "Progeny")
Scores3 <- melt(Scores2, id = c("Progeny"))
head(Scores3)
Scores3 <- Scores3 %>% separate(variable, c("variable", "delete_me"), "_")
Scores3 <- subset(Scores3, select = -c(delete_me))
# Make a table with the standard deviations away from the mean things are
standardDevs <- apply(Scores,2,sd)
Means <- colMeans(Scores)
standardDevs[1]/100
ScoreDistances <- Scores
i = 1
j = 1
for (i in 1:ncol(ScoreDistances)){
parentMean <- Means[i]
parentSTD <- standardDevs[i]
for (j in 1:nrow(ScoreDistances)){
ScoreDistances[j,i] <- (Scores[j,i] - parentMean)/parentSTD
}
}
ScoreDistances2 <- tibble::rownames_to_column(ScoreDistances, "Progeny")
ScoreDistances3 <- melt(ScoreDistances2, id = c("Progeny"))
# Finding parents with highest two psoitive stds away from the mean. Checks if others are close and if so adds two more
predicted_Parents <- as.data.frame(matrix(ncol = ncol(Scores), nrow = nrow(Scores)))
rownames(predicted_Parents) <- Scores2[,1]
predicted_Parents <- tibble::rownames_to_column(predicted_Parents, "Progeny")
for (i in 1:nrow(predicted_Parents)){
Progeny_name <- predicted_Parents[i,1]
single_Progeny <- subset(ScoreDistances3, Progeny == Progeny_name)
single_Progeny_ordered <- single_Progeny[order(single_Progeny$value),c(1,2,3)] #Orders data set by chosen column
predicted_Parents[i,2] <- single_Progeny_ordered[ncol(ScoreDistances),2] # For some reason this translates the names into numbers representing the names in alphabetical order
predicted_Parents[i,3] <- single_Progeny_ordered[ncol(ScoreDistances)-1,2]
if ((single_Progeny_ordered[ncol(ScoreDistances)-2,3] - single_Progeny_ordered[ncol(ScoreDistances)-3,3]) < .5){
predicted_Parents[i,4] <- single_Progeny_ordered[ncol(ScoreDistances)-2,2]
predicted_Parents[i,5] <- single_Progeny_ordered[ncol(ScoreDistances)-3,2]
}
}
# Making a refrence key to know what progeny go with what parents
new_row_names <- parent_progeny_key[, "V1"]
rownames(parent_progeny_key) <- new_row_names
parent_progeny_key <- subset(parent_progeny_key, select = -c(V1))
# Adding key  to data that may need it
Scores2 <- merge(Scores2,parent_progeny_key, by.x = "Progeny", by.y = 0)
#Histograms of 1 parent vs all progeny
MakeHis <- function(parent_name){
plot1 <- ggplot(Scores2, aes_(x=as.name(parent_name))) + geom_histogram(binwidth=.01) + theme_bw() +
xlim(.6, 1) + ylim(0, 1800)
return(plot1)
}
i=0
x = 301
for (i in 2:18){
Parent = colnames(Scores2[i])
KnownParent = subset(Scores2, V2 == x)
cols <- c(i, 19)
KnownParent <- KnownParent[,cols]
print(ggplot(Scores2, aes_(x=as.name(Parent))) + geom_histogram(binwidth=.01)  + geom_histogram(data = KnownParent, fill = "darkblue", binwidth=.01)+ theme_bw() +
xlim(.6, 1) + ylim(-1, 1800))
if (x == 308 | x == 310 | x == 316){
x = x+2}
}
#library(ggplot2)
#library(vegan)
#library(dplyr)
library(reshape2)
library(tidyverse)
library(vegan)
library(Rfast)
Flex_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/progeny_hmp_names.txt", sep = "\t")
Parent_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_hmp_names_clean.txt", sep = "\t")
Scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table_normalized.txt", sep = " ")
Scores_not_normal <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table.txt", sep = " ")
max_scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/max_scores.txt", sep = " ")
Parents_Percent_Heterozygous <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/Parents_Percent_Heterozygous.txt", sep = "\t", header = TRUE)
parent_progeny_key <- read.table ("/home/drt83172/Documents/Tall_fescue/parent_projeny.txt", sep = "\t", header = FALSE)
#Fixing up the name data to just have the names and not other stuff
Flex_hmp_names2 <- select(Flex_hmp_names, -1:-11)
Parent_hmp_names2 <- select(Parent_hmp_names, -1:-11)
Parent_hmp_names2 <- gather(Parent_hmp_names2, key)
Flex_hmp_names2 <- gather(Flex_hmp_names2, key)
typeof(Parent_hmp_names2)
# The Colnames functino renames columns with 1 for every column. Did this with 2 sets of data.
new_col_names <- Parent_hmp_names2[, "value"]
colnames(Scores) <- new_col_names
new_row_names <- Flex_hmp_names2[, "value"]
rownames(Scores) <- new_row_names
Scores2 <- tibble::rownames_to_column(Scores, "Progeny")
Scores3 <- melt(Scores2, id = c("Progeny"))
head(Scores3)
Scores3 <- Scores3 %>% separate(variable, c("variable", "delete_me"), "_")
Scores3 <- subset(Scores3, select = -c(delete_me))
# Make a table with the standard deviations away from the mean things are
standardDevs <- apply(Scores,2,sd)
Means <- colMeans(Scores)
standardDevs[1]/100
ScoreDistances <- Scores
i = 1
j = 1
for (i in 1:ncol(ScoreDistances)){
parentMean <- Means[i]
parentSTD <- standardDevs[i]
for (j in 1:nrow(ScoreDistances)){
ScoreDistances[j,i] <- (Scores[j,i] - parentMean)/parentSTD
}
}
ScoreDistances2 <- tibble::rownames_to_column(ScoreDistances, "Progeny")
ScoreDistances3 <- melt(ScoreDistances2, id = c("Progeny"))
# Finding parents with highest two psoitive stds away from the mean. Checks if others are close and if so adds two more
predicted_Parents <- as.data.frame(matrix(ncol = ncol(Scores), nrow = nrow(Scores)))
rownames(predicted_Parents) <- Scores2[,1]
predicted_Parents <- tibble::rownames_to_column(predicted_Parents, "Progeny")
for (i in 1:nrow(predicted_Parents)){
Progeny_name <- predicted_Parents[i,1]
single_Progeny <- subset(ScoreDistances3, Progeny == Progeny_name)
single_Progeny_ordered <- single_Progeny[order(single_Progeny$value),c(1,2,3)] #Orders data set by chosen column
predicted_Parents[i,2] <- single_Progeny_ordered[ncol(ScoreDistances),2] # For some reason this translates the names into numbers representing the names in alphabetical order
predicted_Parents[i,3] <- single_Progeny_ordered[ncol(ScoreDistances)-1,2]
if ((single_Progeny_ordered[ncol(ScoreDistances)-2,3] - single_Progeny_ordered[ncol(ScoreDistances)-3,3]) < .5){
predicted_Parents[i,4] <- single_Progeny_ordered[ncol(ScoreDistances)-2,2]
predicted_Parents[i,5] <- single_Progeny_ordered[ncol(ScoreDistances)-3,2]
}
}
# Making a refrence key to know what progeny go with what parents
new_row_names <- parent_progeny_key[, "V1"]
rownames(parent_progeny_key) <- new_row_names
parent_progeny_key <- subset(parent_progeny_key, select = -c(V1))
# Adding key  to data that may need it
Scores2 <- merge(Scores2,parent_progeny_key, by.x = "Progeny", by.y = 0)
MakeHis <- function(parent_name){
plot1 <- ggplot(Scores2, aes_(x=as.name(parent_name))) + geom_histogram(binwidth=.01) + theme_bw() +
xlim(.6, 1) + ylim(0, 1800)
return(plot1)
}
i=0
x = 301
for (i in 2:18){
Parent = colnames(Scores2[i])
KnownParent = subset(Scores2, V2 == x)
cols <- c(i, 19)
KnownParent <- KnownParent[,cols]
print(ggplot(Scores2, aes_(x=as.name(Parent))) + geom_histogram(binwidth=.01)  + geom_histogram(data = KnownParent, fill = "darkblue", binwidth=.01)+ theme_bw() +
xlim(.6, 1) + ylim(-1, 1800))
if (x == 308 | x == 310 | x == 316){
x = x+2}
}
View(max_scores)
View(Scores)
View(parent_progeny_key)
parent_progeny_key <- read.table ("/home/drt83172/Documents/Tall_fescue/parent_projeny.txt", sep = "\t", header = FALSE)
new_row_names <- parent_progeny_key[, "V1"]
rownames(parent_progeny_key) <- new_row_names
parent_progeny_key <- subset(parent_progeny_key, select = -c(V1))
Flex_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/progeny_hmp_names.txt", sep = "\t")
Parent_hmp_names <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_hmp_names_clean.txt", sep = "\t")
Scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table_normalized.txt", sep = " ")
Scores_not_normal <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/parent_progeny_score_table.txt", sep = " ")
max_scores <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/max_scores.txt", sep = " ")
Parents_Percent_Heterozygous <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/Parents_Percent_Heterozygous.txt", sep = "\t", header = TRUE)
parent_progeny_key <- read.table ("/home/drt83172/Documents/Tall_fescue/parent_projeny.txt", sep = "\t", header = FALSE)
#Fixing up the name data to just have the names and not other stuff
Flex_hmp_names2 <- select(Flex_hmp_names, -1:-11)
Parent_hmp_names2 <- select(Parent_hmp_names, -1:-11)
Parent_hmp_names2 <- gather(Parent_hmp_names2, key)
Flex_hmp_names2 <- gather(Flex_hmp_names2, key)
typeof(Parent_hmp_names2)
# The Colnames functino renames columns with 1 for every column. Did this with 2 sets of data.
new_col_names <- Parent_hmp_names2[, "value"]
colnames(Scores) <- new_col_names
new_row_names <- Flex_hmp_names2[, "value"]
rownames(Scores) <- new_row_names
Scores2 <- tibble::rownames_to_column(Scores, "Progeny")
Scores3 <- melt(Scores2, id = c("Progeny"))
head(Scores3)
Scores3 <- Scores3 %>% separate(variable, c("variable", "delete_me"), "_")
Scores3 <- subset(Scores3, select = -c(delete_me))
# Make a table with the standard deviations away from the mean things are
standardDevs <- apply(Scores,2,sd)
Means <- colMeans(Scores)
standardDevs[1]/100
ScoreDistances <- Scores
i = 1
j = 1
for (i in 1:ncol(ScoreDistances)){
parentMean <- Means[i]
parentSTD <- standardDevs[i]
for (j in 1:nrow(ScoreDistances)){
ScoreDistances[j,i] <- (Scores[j,i] - parentMean)/parentSTD
}
}
ScoreDistances2 <- tibble::rownames_to_column(ScoreDistances, "Progeny")
ScoreDistances3 <- melt(ScoreDistances2, id = c("Progeny"))
# Finding parents with highest two psoitive stds away from the mean. Checks if others are close and if so adds two more
predicted_Parents <- as.data.frame(matrix(ncol = ncol(Scores), nrow = nrow(Scores)))
rownames(predicted_Parents) <- Scores2[,1]
predicted_Parents <- tibble::rownames_to_column(predicted_Parents, "Progeny")
for (i in 1:nrow(predicted_Parents)){
Progeny_name <- predicted_Parents[i,1]
single_Progeny <- subset(ScoreDistances3, Progeny == Progeny_name)
single_Progeny_ordered <- single_Progeny[order(single_Progeny$value),c(1,2,3)] #Orders data set by chosen column
predicted_Parents[i,2] <- single_Progeny_ordered[ncol(ScoreDistances),2] # For some reason this translates the names into numbers representing the names in alphabetical order
predicted_Parents[i,3] <- single_Progeny_ordered[ncol(ScoreDistances)-1,2]
if ((single_Progeny_ordered[ncol(ScoreDistances)-2,3] - single_Progeny_ordered[ncol(ScoreDistances)-3,3]) < .5){
predicted_Parents[i,4] <- single_Progeny_ordered[ncol(ScoreDistances)-2,2]
predicted_Parents[i,5] <- single_Progeny_ordered[ncol(ScoreDistances)-3,2]
}
}
# Making a refrence key to know what progeny go with what parents
new_row_names <- parent_progeny_key[, "V1"]
rownames(parent_progeny_key) <- new_row_names
parent_progeny_key <- subset(parent_progeny_key, select = -c(V1))
# Adding key  to data that may need it
Scores2 <- merge(Scores2,parent_progeny_key, by.x = "Progeny", by.y = 0)
#######################################################################################
# Graphing the mean score of each parent against their heterozygosity
Parents_Percent_Heterozygous
Parent_Means <- as.data.frame(colMeans(Scores))
colnames(Parent_Means) <- "Mean_Score"
Parent_Data <- merge(Parent_Means,Parents_Percent_Heterozygous, by.x = 0, by.y = "Taxa.Name")
colnames(Parent_Data)[1] <- "Parent"
lm_eqn <- function(df){
m <- lm(Proportion.Heterozygous ~ Mean_Score, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(Parent_Data, aes_(x=as.name('Mean_Score'), y=as.name('Proportion.Heterozygous'))) + geom_point(size = 5) +
theme_bw() + geom_text(aes(label=Parent),hjust=0, vjust=0) +
geom_text(x = .97, y = .48, label = lm_eqn(Parent_Data), parse = TRUE)
View(Scores2)
View(Scores)
Progeny_numerical <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/FlexSeq_numerical.txt", sep = "\t", header = TRUE, row)
Progeny_numerical <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/FlexSeq_numerical.txt", sep = "\t", header = TRUE)
Progeny_numerical <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/DeleteMe.txt", sep = "\t", header = TRUE)
View(Progeny_numerical)
Progeny_numerical <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/DeleteMe.txt", sep = "\t", header = TRUE, row.names = 1)
View(parent_progeny_key)
Progeny_numerical <- merge(Progeny_numerical,parent_progeny_key, by.x = 0, by.y = 0)
Progeny_numerical <- read.table ("/home/drt83172/Documents/Tall_fescue/Genotype_Data/2021_01_22_FescueFlexSeqGenos/Filtered_data/DeleteMe.txt", sep = "\t", header = TRUE, row.names = 1)
Progeny_numerical <- merge(Progeny_numerical,parent_progeny_key, by.x = 0, by.y = 0)
column_to_rownames(Progeny_numerical, loc = 1)
column_to_rownames(Progeny_numerical, loc = "row.names")
column_to_rownames(Progeny_numerical, loc = "Row.names")
column_to_rownames(Progeny_numerical)
column_to_rownames(Progeny_numerical, loc = "Row.names")
new_row_names <- Progeny_numerical[, "Row.names"]
rownames(Progeny_numerical) <- new_row_names
Progeny_numerical <- subset(Progeny_numerical, select = -c(Row.names))
row.names(Progeny_numerical)
row.names(Progeny_numerical)[1]
col.names(Progeny_numerical)[1]
colnames(Progeny_numerical)
colnames(Progeny_numerical)[1]
dim(Progeny_numerical)
dim(Progeny_numerical)[1]
dim(Progeny_numerical)[2]
one.way <- aov(colnames(Progeny_numerical)[1] ~ V2, data = Progeny_numerical)
aov(colnames(Progeny_numerical)[1]
qqq
colnames(Progeny_numerical)[1]
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ V2, data = Progeny_numerical)
View(one.way)
summary(one.way)
one.way <- aov(V2 ~ SNODE_10046_LENGTH_6961_COV_4.925189_1111, data = Progeny_numerical)
summary(one.way)
Progeny_numerical <- Progeny_numerical %>% rename(Maternal_Parent = V2)
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
summary(one.way)
plot(one.way)
# Scatter plot of numerical genotypes
ggplot(Scores3_single, aes_(x=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), y=as.name('Maternal_Parent'), colour=as.name('Maternal_Parent'))) + geom_point(size = 5) +
theme_bw() + annotate("text", x = 1, y = .96, label = Parent_Name, size = 5, colour = "red")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), colour=as.name('Maternal_Parent'))) + geom_point(size = 5) +
theme_bw() + annotate("text", x = 1, y = .96, label = Parent_Name, size = 5, colour = "red")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), colour=as.name('Maternal_Parent'))) + geom_point(size = 5) +
theme_bw() + xlim(301-320)
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), colour=as.name('Maternal_Parent'))) + geom_point(size = 5) +
theme_bw() + xlim(301,320)
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), colour=as.name('Dark Blue'))) + geom_point(size = 5) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'), colour='Dark Blue')) + geom_point(size = 5) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue") +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", opacity = .01) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .01) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .005) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + xlim(301,320) + xlab("ID")
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + xlim(301,320) + xlab("Maternal_Parent")
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + xlim(301,320) + scale_x_continuous("Maternal_Parent", labels = as.character(Maternal_Parent), breaks = Maternal_Parent)
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + xlim(301,320) + scale_x_continuous("Maternal_Parent", labels = as.character("Maternal_Parent"), breaks = "Maternal_Parent")
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + xlim(301,320) + scale_x_continuous("Maternal_Parent")
ggplot(Scores2, aes_(x=as.name(parent_name))) + geom_histogram(binwidth=.01) + theme_bw() +
xlim(.6, 1) + ylim(0, 1800)
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = c("Maternal_Parent"))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = c(Maternal_Parent))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = (Maternal_Parent))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = ('Maternal_Parent'))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = (301,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,319,320))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = c(301,302,303,304,305,306,307,308,310,311,312,313,314,315,316,317,318,319,320))
# Scatter plot of numerical genotypes by a single site
ggplot(Progeny_numerical, aes_(x=as.name('Maternal_Parent'), y=as.name('SNODE_10046_LENGTH_6961_COV_4.925189_1111'))) + geom_point(size = 5, color = "blue", alpha = .008) +
theme_bw() + scale_x_continuous(limits = c(301, 320), breaks = c(301,302,303,304,305,306,307,308,310,312,313,314,315,316,320))
# Anova testing
#for (x in 1:dim(Progeny_numerical)[2]){
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
#}
summary(one.way)
plot(one.way)
leveneTest(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
#library(ggplot2)
#library(vegan)
library(dplyr)
leveneTest(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
library(multcomp)
install.packages(multcomp)
install.packages(car)
install.packages("car")
library(car)
library(car)
leveneTest(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
is.factor(Progeny_numerical$Maternal_Parent)
as.factor(Progeny_numerical$Maternal_Parent)
leveneTest(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
Progeny_numerical$Maternal_Parent <- as.factor(Progeny_numerical$Maternal_Parent)
leveneTest(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
plot(one.way, 1) #plots residuals and fitted value means.
plot(one.way, 2) #checking if risiduals are normally distributed.
aov_residuals <- residuals(object = one.way )
shapiro.test(x = aov_residuals )
dim(Progeny_numerical)[2]
rownames(Progeny_numerical)[1]
rownames(Progeny_numerical)[0]
rownames(Progeny_numerical)[2]
x = 1
progeny_name <- rownames(Progeny_numerical)[x]
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
colnames(Progeny_numerical)[1]
x = 1
progeny_name <- colnames(Progeny_numerical)[x]
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
progeny_name
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
x = 1
progeny_name <- colnames(Progeny_numerical)[x]
progeny_name
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
progeny_name[2]
progeny_name[1]
progeny_name = "SNODE_10046_LENGTH_6961_COV_4.925189_1111"
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(paste0(progeny_name) ~ Maternal_Parent, data = Progeny_numerical)
progeny_name
x = 1
progeny_name <- colnames(Progeny_numerical)[x]
progeny_name
one.way <- aov(paste0(progeny_name) ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(colnames(Progeny_numerical)[[x]] ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(colnames(Progeny_numerical)[x] ~ Maternal_Parent, data = Progeny_numerical)
progeny_names <- colnames(Progeny_numerical)
one.way <- aov(progeny_names[x] ~ Maternal_Parent, data = Progeny_numerical)
progeny_names[x]
progeny_names <- as.dataframe(colnames(Progeny_numerical))
progeny_names <- data.frame(colnames(Progeny_numerical))
progeny_names
progeny_names[x]
one.way <- aov(progeny_names[x] ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(progeny_names[[x]] ~ Maternal_Parent, data = Progeny_numerical)
View(progeny_names)
progeny_names
progeny_names[[x]]
progeny_names[x]
progeny_names[1][1]
progeny_names(1,1)
progeny_names[1,1]
one.way <- aov(progeny_names[1,1] ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(paste0(progeny_names[1,1]) ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(paste0(progeny_names[1,1], '~ Maternal_Parent'), data = Progeny_numerical)
one.way <- aov(paste0(progeny_names[1,1]) ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(paste0(Progeny_numerical$x ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(Progeny_numerical$x ~ Maternal_Parent, data = Progeny_numerical)
x = 1
progeny_name <- colnames(Progeny_numerical)[x]
progeny_name
one.way <- aov(progeny_name ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(Progeny_numerical$x ~ Maternal_Parent, data = Progeny_numerical)
Progeny_numerical$x
Progeny_numerical$progeny_name
Progeny_numerical$SNODE_10046_LENGTH_6961_COV_4.925189_1111
one.way <- aov(Progeny_numerical[[x]] ~ Maternal_Parent, data = Progeny_numerical)
one.way <- aov(Progeny_numerical[[x]] ~ Maternal_Parent, data = Progeny_numerical)
one.way
Progeny_numerical[[x]]
Progeny_numerical[x]
Progeny_numerical[[x]]
progeny_name
one.way <- aov(Progeny_numerical[[x]] ~ Maternal_Parent, data = Progeny_numerical)
one.way
one.way <- aov(SNODE_10046_LENGTH_6961_COV_4.925189_1111 ~ Maternal_Parent, data = Progeny_numerical)
one.way
